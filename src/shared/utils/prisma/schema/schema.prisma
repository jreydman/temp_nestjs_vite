generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder", "fullTextIndex", "fullTextSearch", "postgresqlExtensions", "views", "omitApi"]
  output          = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator jsontypes {
//   provider  = "prisma-json-types-generator"
//   namespace = "PrismaJson"

//   allowAny = false
// }

// generator zodtypes {
//   provider                         = "zod-prisma-types"
//   output                           = "../zod" // default is ./generated/zod
//   useMultipleFiles                 = true // default is false
//   writeBarrelFiles                 = true // default is true
//   createInputTypes                 = false // default is true
//   createModelTypes                 = true // default is true
//   addInputTypeValidation           = false // default is true
//   addIncludeType                   = false // default is true
//   addSelectType                    = false // default is true
//   validateWhereUniqueInput         = false // default is false
//   createOptionalDefaultValuesTypes = true // default is false
//   createRelationValuesTypes        = false // default is false
//   createPartialTypes               = false // default is false
//   useDefaultValidators             = true // default is true
//   coerceDate                       = true // default is true
//   writeNullishInModelTypes         = false // default is false
// }

model User {
  id String @id @default(uuid())

  mail     String? @db.VarChar(80)
  username String  @unique @db.VarChar(80)
  password String  @db.VarChar(80)

  url    String? @db.VarChar(1024)
  avatar String? @db.VarChar(1024)

  socialIds Json?      @default("{}") @map("social_ids")
  apiTokens ApiToken[]
  oauths    OAuth[]

  created  DateTime  @default(now()) @map("created_at")
  modified DateTime? @updatedAt @map("updated_at")

  lastLoginIp   String?   @map("last_login_ip")
  lastLoginTime DateTime? @map("last_login_time")
}

model OAuth {
  id       String @id @default("")
  userId   String
  platform String
  oauthId  String
  user     User   @relation(fields: [userId], references: [id])
}

model ApiToken {
  id      String    @id @default("")
  userId  String
  created DateTime  @default(now()) @map("created_at")
  token   String
  expired DateTime?
  name    String    @unique
  user    User      @relation(fields: [userId], references: [id])
}
