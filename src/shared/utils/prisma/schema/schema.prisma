datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder", "fullTextIndex", "fullTextSearch", "postgresqlExtensions", "views", "omitApi"]
  // output          = "../generated/client"
}

generator zodtypes {
  provider                         = "zod-prisma-types"
  output                           = "../generated/zod" // default is ./generated/zod
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = true // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = true // default is true
  addIncludeType                   = true // default is true
  addSelectType                    = true // default is true
  validateWhereUniqueInput         = false // default is false
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
}

model User {
  id String @id @default(uuid())

  /// @zod.string.email()
  email    String @unique @db.VarChar(80)
  username String @unique @db.VarChar(80)
  password String @db.VarChar(80)

  url    String?    @db.VarChar(1024)
  roles  UserRole[] @default([USER])
  avatar String?    @db.VarChar(1024)

  socialIds Json?      @default("{}") @map("social_ids")
  apiTokens ApiToken[]
  oauths    OAuth[]

  created  DateTime  @default(now()) @map("created_at")
  modified DateTime? @updatedAt @map("updated_at")

  lastLoginIp   String?   @map("last_login_ip")
  lastLoginTime DateTime? @map("last_login_time")

  emailVerification EmailVerification?
}

model EmailVerification {
  userId String @id @unique
  user   User   @relation(fields: [userId], references: [id])

  token  String?
  status SignStatus @default(NONE)
}

model OAuth {
  userId   String
  platform OAuthPlatform
  oauthId  String
  user     User          @relation(fields: [userId], references: [id])

  @@id([userId, platform, oauthId])
}

model ApiToken {
  id      String    @id @default("")
  userId  String
  created DateTime  @default(now()) @map("created_at")
  token   String
  expired DateTime?
  name    String    @unique
  user    User      @relation(fields: [userId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

enum SignStatus {
  NONE
  PENDING
  ACTIVE
  INACTIVE
}

enum OAuthPlatform {
  GOOGLE
  GITHUB
  TWITTER
}
